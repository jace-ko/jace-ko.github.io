<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech 2020 on My Site</title>
    <link>https://mason-ko.github.io/posts/tech/2020/</link>
    <description>Recent content in Tech 2020 on My Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 16 Dec 2020 19:32:00 +0900</lastBuildDate><atom:link href="https://mason-ko.github.io/posts/tech/2020/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>gRPC Gateway 를 사용하여 gin 에 띄웠을때 Marshaler 커스텀</title>
      <link>https://mason-ko.github.io/posts/tech/2020/2020-12-16-custom-mashaler-grpc-gateway/</link>
      <pubDate>Wed, 16 Dec 2020 19:32:00 +0900</pubDate>
      
      <guid>https://mason-ko.github.io/posts/tech/2020/2020-12-16-custom-mashaler-grpc-gateway/</guid>
      <description>{% highlight Kconfig %} type myMarshaler struct { JSONPb *runtime.JSONPb }
func NewMyMarshaler() runtime.ServeMuxOption { m := myMarshaler{ JSONPb: &amp;amp;runtime.JSONPb{OrigName: true, EmitDefaults: true}, }
return runtime.WithMarshalerOption(runtime.MIMEWildcard, m) }
{% endhighlight %}
{% highlight Kconfig %}
func (m customMarshaler) Marshal(v interface{}) ([]byte, error) { return m.JSONPb.Marshal(v) }
func (m myMarshaler) Unmarshal(data []byte, v interface{}) error { return m.JSONPb.Unmarshal(data, v) }
func (m myMarshaler) NewDecoder(r io.Reader) runtime.Decoder { return m.JSONPb.NewDecoder(r) }</description>
    </item>
    
  </channel>
</rss>
